{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDate = void 0;\nvar expiration_year_1 = require(\"../expiration-year\");\nvar is_array_1 = require(\"./is-array\");\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n  var firstCharacter = Number(dateString[0]);\n  var assumedYear;\n  /*\n    if the first character in the string starts with `0`,\n    we know that the month will be 2 digits.\n       '0122' => {month: '01', year: '22'}\n  */\n  if (firstCharacter === 0) {\n    return 2;\n  }\n  /*\n    if the first character in the string starts with\n    number greater than 1, it must be a 1 digit month\n       '322' => {month: '3', year: '22'}\n  */\n  if (firstCharacter > 1) {\n    return 1;\n  }\n  /*\n    if the first 2 characters make up a number between\n    13-19, we know that the month portion must be 1\n       '139' => {month: '1', year: '39'}\n  */\n  if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n    return 1;\n  }\n  /*\n    if the first 2 characters make up a number between\n    10-12, we check if the year portion would be considered\n    valid if we assumed that the month was 1. If it is\n    not potentially valid, we assume the month must have\n    2 digits.\n       '109' => {month: '10', year: '9'}\n    '120' => {month: '1', year: '20'} // when checked in the year 2019\n    '120' => {month: '12', year: '0'} // when checked in the year 2021\n  */\n  if (firstCharacter === 1) {\n    assumedYear = dateString.substr(1);\n    return expiration_year_1.expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n  }\n  /*\n    If the length of the value is exactly 5 characters,\n    we assume a full year was passed in, meaning the remaining\n    single leading digit must be the month value.\n       '12202' => {month: '1', year: '2202'}\n  */\n  if (dateString.length === 5) {\n    return 1;\n  }\n  /*\n    If the length of the value is more than five characters,\n    we assume a full year was passed in addition to the month\n    and therefore the month portion must be 2 digits.\n       '112020' => {month: '11', year: '2020'}\n  */\n  if (dateString.length > 5) {\n    return 2;\n  }\n  /*\n    By default, the month value is the first value\n  */\n  return 1;\n}\nfunction parseDate(datestring) {\n  var date;\n  if (/^\\d{4}-\\d{1,2}$/.test(datestring)) {\n    date = datestring.split(\"-\").reverse();\n  } else if (/\\//.test(datestring)) {\n    date = datestring.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(datestring)) {\n    date = datestring.split(/ +/g);\n  }\n  if (is_array_1.isArray(date)) {\n    return {\n      month: date[0] || \"\",\n      year: date.slice(1).join()\n    };\n  }\n  var numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(datestring);\n  var month = datestring.substr(0, numberOfDigitsInMonth);\n  return {\n    month: month,\n    year: datestring.substr(month.length)\n  };\n}\nexports.parseDate = parseDate;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseDate","expiration_year_1","require","is_array_1","getNumberOfMonthDigitsInDateString","dateString","firstCharacter","Number","assumedYear","substr","expirationYear","isPotentiallyValid","length","datestring","date","test","split","reverse","isArray","month","year","slice","join","numberOfDigitsInMonth"],"sources":["C:/Users/The Saviour/OneDrive/Documents/WEB Applications/design-test-team-recruit-osusu-osusu/myapp/node_modules/card-validator/dist/lib/parse-date.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDate = void 0;\nvar expiration_year_1 = require(\"../expiration-year\");\nvar is_array_1 = require(\"./is-array\");\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n    var firstCharacter = Number(dateString[0]);\n    var assumedYear;\n    /*\n      if the first character in the string starts with `0`,\n      we know that the month will be 2 digits.\n  \n      '0122' => {month: '01', year: '22'}\n    */\n    if (firstCharacter === 0) {\n        return 2;\n    }\n    /*\n      if the first character in the string starts with\n      number greater than 1, it must be a 1 digit month\n  \n      '322' => {month: '3', year: '22'}\n    */\n    if (firstCharacter > 1) {\n        return 1;\n    }\n    /*\n      if the first 2 characters make up a number between\n      13-19, we know that the month portion must be 1\n  \n      '139' => {month: '1', year: '39'}\n    */\n    if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n        return 1;\n    }\n    /*\n      if the first 2 characters make up a number between\n      10-12, we check if the year portion would be considered\n      valid if we assumed that the month was 1. If it is\n      not potentially valid, we assume the month must have\n      2 digits.\n  \n      '109' => {month: '10', year: '9'}\n      '120' => {month: '1', year: '20'} // when checked in the year 2019\n      '120' => {month: '12', year: '0'} // when checked in the year 2021\n    */\n    if (firstCharacter === 1) {\n        assumedYear = dateString.substr(1);\n        return expiration_year_1.expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n    }\n    /*\n      If the length of the value is exactly 5 characters,\n      we assume a full year was passed in, meaning the remaining\n      single leading digit must be the month value.\n  \n      '12202' => {month: '1', year: '2202'}\n    */\n    if (dateString.length === 5) {\n        return 1;\n    }\n    /*\n      If the length of the value is more than five characters,\n      we assume a full year was passed in addition to the month\n      and therefore the month portion must be 2 digits.\n  \n      '112020' => {month: '11', year: '2020'}\n    */\n    if (dateString.length > 5) {\n        return 2;\n    }\n    /*\n      By default, the month value is the first value\n    */\n    return 1;\n}\nfunction parseDate(datestring) {\n    var date;\n    if (/^\\d{4}-\\d{1,2}$/.test(datestring)) {\n        date = datestring.split(\"-\").reverse();\n    }\n    else if (/\\//.test(datestring)) {\n        date = datestring.split(/\\s*\\/\\s*/g);\n    }\n    else if (/\\s/.test(datestring)) {\n        date = datestring.split(/ +/g);\n    }\n    if (is_array_1.isArray(date)) {\n        return {\n            month: date[0] || \"\",\n            year: date.slice(1).join(),\n        };\n    }\n    var numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(datestring);\n    var month = datestring.substr(0, numberOfDigitsInMonth);\n    return {\n        month: month,\n        year: datestring.substr(month.length),\n    };\n}\nexports.parseDate = parseDate;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACrD,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,SAASE,kCAAkCA,CAACC,UAAU,EAAE;EACpD,IAAIC,cAAc,GAAGC,MAAM,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;EAC1C,IAAIG,WAAW;EACf;AACJ;AACA;AACA;AACA;EAEI,IAAIF,cAAc,KAAK,CAAC,EAAE;IACtB,OAAO,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;EAEI,IAAIA,cAAc,GAAG,CAAC,EAAE;IACpB,OAAO,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;EAEI,IAAIA,cAAc,KAAK,CAAC,IAAIC,MAAM,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;IACnD,OAAO,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,IAAIC,cAAc,KAAK,CAAC,EAAE;IACtBE,WAAW,GAAGH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC;IAClC,OAAOR,iBAAiB,CAACS,cAAc,CAACF,WAAW,CAAC,CAACG,kBAAkB,GAAG,CAAC,GAAG,CAAC;EACnF;EACA;AACJ;AACA;AACA;AACA;AACA;EAEI,IAAIN,UAAU,CAACO,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;EAEI,IAAIP,UAAU,CAACO,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,CAAC;EACZ;EACA;AACJ;AACA;EACI,OAAO,CAAC;AACZ;AACA,SAASZ,SAASA,CAACa,UAAU,EAAE;EAC3B,IAAIC,IAAI;EACR,IAAI,iBAAiB,CAACC,IAAI,CAACF,UAAU,CAAC,EAAE;IACpCC,IAAI,GAAGD,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC;EAC1C,CAAC,MACI,IAAI,IAAI,CAACF,IAAI,CAACF,UAAU,CAAC,EAAE;IAC5BC,IAAI,GAAGD,UAAU,CAACG,KAAK,CAAC,WAAW,CAAC;EACxC,CAAC,MACI,IAAI,IAAI,CAACD,IAAI,CAACF,UAAU,CAAC,EAAE;IAC5BC,IAAI,GAAGD,UAAU,CAACG,KAAK,CAAC,KAAK,CAAC;EAClC;EACA,IAAIb,UAAU,CAACe,OAAO,CAACJ,IAAI,CAAC,EAAE;IAC1B,OAAO;MACHK,KAAK,EAAEL,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;MACpBM,IAAI,EAAEN,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;IAC7B,CAAC;EACL;EACA,IAAIC,qBAAqB,GAAGnB,kCAAkC,CAACS,UAAU,CAAC;EAC1E,IAAIM,KAAK,GAAGN,UAAU,CAACJ,MAAM,CAAC,CAAC,EAAEc,qBAAqB,CAAC;EACvD,OAAO;IACHJ,KAAK,EAAEA,KAAK;IACZC,IAAI,EAAEP,UAAU,CAACJ,MAAM,CAACU,KAAK,CAACP,MAAM;EACxC,CAAC;AACL;AACAd,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}